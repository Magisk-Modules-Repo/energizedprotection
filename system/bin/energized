#!/system/bin/sh
# ======================================================================
# Module: Energized Protection
# License: CC BY-NC-SA 4.0; https://energized.pro/license
# Copyright (C) 2018-2021 Energized Protection.
# ======================================================================
# Script Begins -
# ========================================

# ----------------------------------------
# Determine the Magisk binary's location
# ----------------------------------------

if [ -d "/sbin/.magisk" ]; then
    magisk_sbin="/sbin/.magisk"
elif [ -d "$(magisk --path)/.magisk" ]; then
    magisk_sbin="$(magisk --path)/.magisk"
fi

# ----------------------------------------
# Load setup files and strings
# ----------------------------------------
modPath="$magisk_sbin/modules/energizedprotection/system/bin"
. $modPath/setupFiles.sh
. $modPath/mainMenu.sh
. $modPath/strings.sh

alias wget="$busybox wget"
alias awk="$busybox awk"

# ----------------------------------------
# Define Energized Protection directory
# ----------------------------------------
directory="/sdcard/Documents/EnergizedProtection"
# Create directory
if [ ! -d $directory ]; then
    mkdir -p $directory;
fi

# ----------------------------------------
# Config
# ----------------------------------------
config="$directory/ep.conf"
getValue() { sed -n "s|^$1=||p" "$config"; }
getFileSize() { ls -lah "$1" | awk '{print $5}'; }
# ----------------------------------------

# ----------------------------------------
# Colors
# ----------------------------------------
BL='\e[01;90m' > /dev/null 2>&1; # Black
R='\e[01;91m' > /dev/null 2>&1; # Red
LR='\033[1;31m' > /dev/null 2>&1; # printf Red
G='\e[01;92m' > /dev/null 2>&1; # Green
LG='\033[1;32m' > /dev/null 2>&1; # printf Green
Y='\e[01;93m' > /dev/null 2>&1; # Yellow
LY='\033[1;33m' > /dev/null 2>&1; # printf Yellow
B='\e[01;94m' > /dev/null 2>&1; # Blue
P='\e[01;95m' > /dev/null 2>&1; # Purple
C='\e[01;96m' > /dev/null 2>&1; # Cyan
LC='\033[1;36m' > /dev/null 2>&1; # printf Cyan
W='\e[01;97m' > /dev/null 2>&1; # White
LW='\033[1;37m' > /dev/null 2>&1; # printf White
N='\e[0m' > /dev/null 2>&1; # No color
NC='\033[0m' > /dev/null 2>&1; # printf No color
# ----------------------------------------

hitWeb() { curl --connect-timeout 5 -sf http://go.energized.pro/web > /dev/null 2>&1; }

# ----------------------------------------
# Mount and unmount system
# ----------------------------------------
mountSystem(){
    mount -o remount,rw '/system' 2>> "${Output[0]}" 1>> "${Output[0]}"
}
unmountSystem(){
    mount -o remount,ro '/system' 2>> "${Output[0]}" 1>> "${Output[0]}"
}
# ----------------------------------------

# ----------------------------------------
# Variables
# ----------------------------------------
userAgent='Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0'
hostsGZ=$directory/hosts.gz
versionInfo=$directory/cache/version.md
versionBackup=$directory/cache/version.md.bck
configBackup=$directory/cache/ep.conf.bck
filter=$directory/cache/filter
filterBackup=$directory/cache/filter.bck
whitelist=$directory/whitelist
blacklist=$directory/blacklist
REDIRECTLIST=$directory/redirectlist
temp=$directory/cache/temp
atemp=$directory/cache/temp.a
btemp=$directory/cache/temp.b
ctemp=$directory/cache/temp.c
dtemp=$directory/cache/temp.d
etemp=$directory/cache/temp.e
ltemp=$directory/cache/ltemp
ptemp=$directory/cache/ptemp
stemp=$directory/cache/stemp
hostsBackup=$directory/hosts-backup.gz
lastUpdated=$(grep "Version Code" $filter 2>/dev/null | sed "s/! Version Code: //")
currentIP=$(grep -o -m 1 '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\} watchdog.energized.pro' "$hosts" | sed 's/watchdog.energized.pro//')
# ----------------------------------------

# ----------------------------------------
# Versioning & Date
# ----------------------------------------
version=$Y'1.3.6'$N > /dev/null 2>&1
releaseDate=$G'Feb 05, 2022'$N > /dev/null 2>&1
date=$(date "+%d.%m.%Y %H:%M:%S")
# ----------------------------------------

# ----------------------------------------
# Check Directory
# ----------------------------------------
checkDirectory() {
    # Create directory
    if [ ! -d $directory ]; then
        mkdir -p $directory;
    fi
    # Create cache folder
    if [ ! -d $directory/cache ]; then
        mkdir -p $directory/cache;
    fi
    # Check Blacklist
    if [ ! -f $directory/blacklist ]; then
        touch $directory/blacklist
    fi
    # Check Whitelist
    if [ ! -f $directory/whitelist ]; then
        touch $directory/whitelist
    fi
    # Check Redirectlist
    if [ ! -f $directory/redirectlist ]; then
        touch $directory/redirectlist
    fi
    # Check Temp
    if [ ! -f $directory/cache/temp ]; then
        touch $directory/cache/temp
    fi
    # Check P Temp
    if [ ! -f $directory/cache/ptemp ]; then
        touch $directory/cache/ptemp
    fi
    # Check S Temp
    if [ ! -f $directory/cache/stemp ]; then
        touch $directory/cache/stemp
    fi
    # Check Files
    if [ ! -f $directory/whitelist ] && [ ! -f $directory/redirectlist ] && [ ! -f $directory/blacklist ] && [ ! -f $directory/cache/temp ] && [ ! -f $directory/cache/ptemp ] && [ ! -f $directory/cache/stemp ]; then
        return 0
    else
        return 1
    fi
}
# ----------------------------------------

# ----------------------------------------
# Get file size from URL
# ----------------------------------------
urlFileSize() {
    curl -sI "$1" | grep -i Content-Length | awk '{print $2/1024/1024}'
}
# ----------------------------------------

# ----------------------------------------
# Spin till pid dies
# ----------------------------------------
spinPID() {
    # Spin var
    spin[0]="-"
    spin[1]="\\"
    spin[2]="|"
    spin[3]="/"
    # Check for process
    while kill -0 "$pid" 2> /dev/null; do
        for i in "${spin[@]}"; do
            echo -ne "$W""\r[";
            echo -ne "$Y""$i";
            echo -ne "$W""]" "$W""$1"; sleep 0.1;
        done
    done
}
# ----------------------------------------

# ----------------------------------------
# Cleanup
# ----------------------------------------
cleanup () {
    # Filter
    rm -f $directory/filter
}
# Cleanup temp files
cleanupTemp () {
    rm -f $versionInfo $temp $atemp $btemp $ctemp $dtemp $etemp $ltemp $stemp $ptemp
}
# ----------------------------------------

# ----------------------------------------
# Check for config file
# ----------------------------------------
checkConfig() {
    if [ ! -f $config ]; then
        wget --no-check-certificate -q -O $config "https://block.energized.pro/magisk/ep.conf"
        checkConfig=$G"✓"$N
    else
        checkConfig=$R"×"$N
    fi
}
# ----------------------------------------

# ----------------------------------------
# Check root permission
# ----------------------------------------
checkRoot() {
    id="$(id)"; id="${id#*=}"; id="${id%%\(*}"; id="${id%% *}"
    if [ "$id" != "0" ] && [ "$id" != "root" ]; then
        root=$R"[×]"$N
        return 0
    else
        root=$G"[✓]"$N
        return 1
    fi
}
# ----------------------------------------

# ----------------------------------------
# Check Other Adblocker
# ----------------------------------------
checkAdblockerApp() {
    if [ -d /data/data/org.adaway/ ] || [ -d /system/app/org.adaway/ ] || [ -d /system/priv-app/org.adaway/ ]; then
        adblockAppName=AdAway
        return 1
    elif [ -d /data/data/ru.dixl0f0s.unifiedhostsmanager/ ] || [ -d /system/app/ru.dixl0f0s.unifiedhostsmanager/ ] || [ -d /system/priv-app/ru.dixl0f0s.unifiedhostsmanager/ ]; then
        adblockAppName=UHM
        return 1
    else
	    adblockAppName=''
        return 0
    fi
}
# ----------------------------------------

# ----------------------------------------
# Check internet
# ----------------------------------------
checkInternetConnection(){
    wget --no-check-certificate -q --spider -T '2' https://block.energized.pro 2>/dev/null
    if [ $? -eq 0 ]; then
        return 1
    else
        return 0
    fi
}
# ----------------------------------------

# ----------------------------------------
# Check hosts update
# ----------------------------------------
checkUpdate() {
    checkShell;
    checkEP;
    #checkInternetConnection
    #### Read Config 'checkHostsUpdate=true'
    if [ "$(getValue checkHostsUpdate)" == "true" ]; then
        #if [ "$checkInternet" == "online" ]; then
        ### Check Energized Protection pack
        if [ "$autoPack" != "null" ]; then
            ## Download Version Info
            wget --no-check-certificate -T "3" -q -O $versionInfo https://block.energized.pro/VERSION.md
            #grep -q "Version Code" $versionInfo
            cp $versionInfo $versionBackup
            # Check Filter Info
            if [ -f $filter ]; then 2>/dev/null
                CURRENT=$(grep "Version Code" $versionInfo)
                LAST_UPDATED=$(sed '1q;d' $filter)
                if [ "$LAST_UPDATED" != "$CURRENT" ]; then
                    if [ "$(grep "watchdog.energized.pro" "$hosts")" ]; then
                        eupdate=$G'[ϟ] UPDATE AVAILABLE!'$N
                        checkUpdatePrint=$G"\r[ϟ] Update: Available.\n"$N
                    fi
                else
                    eupdate=$W'[✓] UP-TO-DATE!'$N
                    checkUpdatePrint=$G"\r[✓] Update: Already latest.\n"$N
                fi
            else
                touch $filter
                for x in "EP0R9-P" "EXR3G1094L-P" "EX7R3M3-P" "EXP0R9-P" "EX50C14L-P"; do
                    if grep -q $x "$hosts"
                    then
                        eupdate=$B'[*] Extension Applied'$N
                        checkUpdatePrint=$B"\r[+] Update: Extension applied.\n"$N
                        break

                    else
                        eupdate="[+] APPLY PACK FIRST!"
                        checkUpdatePrint=$Y"\r[+] Update: Apply pack first.\n"$N
                    fi
                done
            fi
        else
            eupdate="[+] APPLY PACK FIRST!"
            checkUpdatePrint=$Y"\r[+] Update: Apply pack first.\n"$N
        fi
    else
        eupdate=""
        checkUpdatePrint=$B"\r[*] Update: Disabled in config.\n"$N
    fi
}
# ----------------------------------------

# ----------------------------------------
# Check Energized Protection pack
# ----------------------------------------
checkEPPack() {
    if [ -f "$hosts" ]; then
        if grep -q "E84S1C-P" "$hosts"; then
            epPack="Basic Protection"
            autoPack="basic"
        elif grep -q "E5P4RK-P" "$hosts"; then
            epPack="Spark Protection"
            autoPack="spark"
        elif grep -q "E8LU-P" "$hosts"; then
            epPack="Blu Protection"
            autoPack="blu"
        elif grep -q "E8LUG0-P" "$hosts"; then
            epPack="BluGo Protection"
            autoPack="bluGo"
        elif grep -q "EP0R9-P" "$hosts"; then
            epPack="Porn Protection"
            autoPack="porn"
        elif grep -q "EUL71M473-P" "$hosts"; then
            epPack="Ultimate Protection"
            autoPack="ultimate"
        elif grep -q "EU91F13D-P" "$hosts"; then
            epPack="Unified Protection"
            autoPack="unified"
        else
            if grep -q "/extensions/" "$hosts"; then
                epPack="Extension"
            else
                epPack="-"
                autoPack="null"
            fi
        fi
    fi
}
# ----------------------------------------

# ----------------------------------------
# Check Energized Protection extension
# ----------------------------------------
checkEPExtensionPack() {
    if [ -f "$hosts" ]; then
        if grep -q "EP0R9-P" "$hosts"; then
            ePCheck="✓"
            epEPack="Porn"
            autoExtension="porn"
        else
            ePCheck=""
        fi
        if grep -q "EXR3G1094L-P" "$hosts"; then
            eRCheck="✓"
            epEPack="Regional"
            autoExtension="regional"
        else
            eRCheck=""
        fi
        if grep -q "EX7R3M3-P" "$hosts"; then
            eXCheck="✓"
            epEPack="Xtreme"
            autoExtension="xtreme"
        else
            eXCheck=""
        fi
        if grep -q "EXP0R9-P" "$hosts"; then
            ePLCheck="✓"
            epEPack="Porn-lite"
            autoExtension="porn-lite"
        else
            ePLCheck=""
        fi
        if grep -q "EX50C14L-P" "$hosts"; then
            eSCheck="✓"
            epEPack="Social"
            autoExtension="social"
        else
            eSCheck=""
        fi
    fi
}
# ----------------------------------------

# ----------------------------------------
# Check Energized Protection service
# ----------------------------------------
checkEP() {
    # Check Magisk hosts
    if [ -f "$hosts" ]; then
        # Check Energized Protection domain
        if grep -q watchdog.energized.pro "$hosts"; then
            eonoff=$G"[✓]"$N
            energizedCheck=$G"✓ "$N$W"Energized Protection activated."$N
        else
            # Check extension(s)
            if grep -q "/extensions/" "$hosts"; then
                eonoff=$B"[*]"$N
                energizedCheck=$B"* "$N$W"Energized Protection partially activated."$N
            else
                eonoff=$R"[×]"$N
                energizedCheck=$R"× "$N$W"Energized Protection not activated."$N
            fi
            #
        fi
        #
    fi
    # Check Energized Protection packs
    checkEPPack;
    # Check Energized Protection extension packs
    checkEPExtensionPack;
}
# ----------------------------------------

# ----------------------------------------
# Setup filter
# ----------------------------------------
setFilter() {
    wget --no-check-certificate -q -O $versionInfo "https://block.energized.pro/VERSION.md"
    cp $versionInfo $versionBackup
    grep "Version Code" $versionInfo > $filter 2>/dev/null
}
# ----------------------------------------

# ----------------------------------------
# Setup minimum required stuffs
# ----------------------------------------
setupFilesMin() {
    # Cleanup cache filter
    cleanup;
    # Setup directory
    checkDirectory;
    # Check Magisk setup
    checkMagisk;
    # Check systemless hosts
    checkSystemlessHosts;
    # Check busybox setup
    checkBusybox;
    # Check Energized Protection
    checkEP;
}
# ----------------------------------------
setupFilesMin;
# ----------------------------------------
# Setup required stuffs for menu
# ----------------------------------------
setupFiles() {
    # Cleanup cache filter
    cleanup;
    # Setup directory
    checkDirectory;
    # Check systemless hosts
    checkSystemlessHosts;
    # Check config file
    checkConfig;
    # Check Magisk setup
    checkMagisk;
    # Check busybox setup
    checkBusybox;
    # Check Config
    checkConfig;
    # Check root
    checkRoot;
    # Check shell
    checkShell;
    # Check systemless hosts
    checkSystemlessHosts;
    # Check other adblocker App(s)
    checkAdblockerApp;
    # Check Energized Protection service
    checkEP;
    # Check hosts update
    checkUpdate 2>/dev/null;
}
# ----------------------------------------

# Divider
# ----------------------------------------
divider="-------------------------------------------------"
divider2="================================================="
divider3="_________________________________________________"


# ----------------------------------------
# Confirmation
# ----------------------------------------
areYouSure() { echo -n -e "$W"'\n[+] Sure? Type "y" or "n" to cancel: '"$N"; read -r 'userAnswer'; }
# ----------------------------------------

# ----------------------------------------
# Check Again?
# ----------------------------------------
checkAgain() { echo -n -e "$W"'[+] Check again? Type "y" or "n" to cancel: '"$N"; read -r 'userAnswer'; }
# ----------------------------------------

# ----------------------------------------
# Visit Telegram
# ----------------------------------------
visitTelegram() {
    am start -a android.intent.action.VIEW -d "http://go.energized.pro/telegram" 2>/dev/null;
    clear
}
# ----------------------------------------

# ----------------------------------------
# Change redirection IP
# ----------------------------------------
changeRedirectionIP() { sed -ie 's/[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}/'"$1"'/g' "$hosts"; }
# ----------------------------------------

# ----------------------------------------
# Ectract domain from URL
# ----------------------------------------
getDomain() {
    domainOnly=$(echo "$1" | cut -d'/' -f3 | cut -d':' -f1 | cut -d'\@' -f2)
    case $domainOnly in
            (*[a-zA-Z]*)
            for i in $domainOnly ; do
                if [[ $i == *.* ]] ; then
                    echo "$i"
                else
                    echo "0"
                fi
            done
            ;;
            (*)
            echo "null"
            ;;
    esac
}
# ----------------------------------------

# ----------------------------------------
# Porn extension download
# ----------------------------------------
pornEDownload() {
    echo -e $Y"$divider"$N; sleep 0.05;
    echo -e "$Y"'[+] P O R N  E X T E N S I O N'"$N"; sleep 0.05;
    echo -e $Y"$divider"$N; sleep 0.05;
    echo -e "$Y""Adds Porn Blocking Pack to current hosts.""$N"; sleep 0.05;
    echo -e $Y"$divider"$N; sleep 0.05;
    wget --no-check-certificate -q -U "$userAgent" -O $hostsGZ "https://block.energized.pro/porn/formats/hosts.gz" & pid=$!
    spinPID "Extension: Downloading";
    gzip -d -c $hostsGZ > $stemp
    mv "$hosts" $temp
    truncate -s 0 "$hosts"
    cat $temp $stemp > "$hosts"
    checkEP;
    echo -en "$W""\r[""$N""$Y""✓""$N""$W""] Extension: ""$N""$Y""Porn Extension\n""$N"
    rm -f $temp $stemp $hostsGZ
}
# ----------------------------------------

# ----------------------------------------
# Porn-lite extension download
# ----------------------------------------
pornliteEDownload() {
    echo -e $Y"$divider"$N; sleep 0.05;
    echo -e "$Y"'[+] P O R N - L I T E  E X T E N S I O N'"$N"; sleep 0.05;
    echo -e $Y"$divider"$N; sleep 0.05;
    echo -e "$Y""Adds Porn Lite Blocking Pack to current hosts.""$N"; sleep 0.05;
    echo -e $Y"$divider"$N; sleep 0.05;
    wget --no-check-certificate -q -O $hostsGZ "https://block.energized.pro/extensions/porn-lite/formats/hosts.gz" & pid=$!
    spinPID "Extension: Downloading";
    gzip -d -c $hostsGZ > $stemp
    mv "$hosts" $temp
    truncate -s 0 "$hosts"
    cat $temp $stemp > "$hosts"
    checkEP;
    echo -en "$W""\r[""$N""$Y""✓""$N""$W""] Extension: ""$N""$Y""Porn-lite Extension\n""$N"
    rm -f $temp $stemp $hostsGZ
}
# ----------------------------------------

# ----------------------------------------
# Regional extension download
# ----------------------------------------
regionalEDownload() {
    echo -e $Y"$divider"$N; sleep 0.05;
    echo -e "$Y"'[+] R E G I O N A L  E X T E N S I O N'"$N"; sleep 0.05;
    echo -e $Y"$divider"$N; sleep 0.05;
    echo -e "$Y""Adds Regional Blocking Pack to current hosts.""$N"; sleep 0.05;
    echo -e $Y"$divider"$N; sleep 0.05;
    wget --no-check-certificate -q -U "$userAgent" -O $hostsGZ "https://block.energized.pro/extensions/regional/formats/hosts.gz" & pid=$!
    spinPID "Extension: Downloading";
    gzip -d -c $hostsGZ > $stemp
    mv "$hosts" $temp
    truncate -s 0 "$hosts"
    cat $temp $stemp > "$hosts"
    checkEP;
    echo -en "$W""\r[""$N""$Y""✓""$N""$W""] Extension: ""$N""$Y""Regional Extension\n""$N"
    rm -f $temp $stemp $hostsGZ
}
# ----------------------------------------

# ----------------------------------------
# Social extension download
# ----------------------------------------
socialEDownload() {
    echo -e $Y"$divider"$N; sleep 0.05;
    echo -e "$Y"'[+] S O C I A L  E X T E N S I O N'"$N"; sleep 0.05;
    echo -e $Y"$divider"$N; sleep 0.05;
    echo -e "$Y""Adds Social Blocking Pack to current hosts.""$N"; sleep 0.05;
    echo -e "$Y"' > Blocks all social apps. (ex. Snapchat)'"$N"; sleep 0.05;
    echo -e "$Y"' > Blocks all social sites. (ex. facebook.com)'"$N"; sleep 0.05;
    echo -e $Y"$divider"$N; sleep 0.05;
    wget --no-check-certificate -q -U "$userAgent" -O $hostsGZ "https://block.energized.pro/extensions/social/formats/hosts.gz" & pid=$!
    spinPID "Extension: Downloading";
    gzip -d -c $hostsGZ > $stemp
    mv "$hosts" $temp
    truncate -s 0 "$hosts"
    cat $temp $stemp > "$hosts"
    checkEP;
    echo -en "$W""\r[""$N""$Y""✓""$N""$W""] Extension: ""$N""$Y""Social Extension\n""$N"
    rm -f $temp $stemp $hostsGZ
}
# ----------------------------------------

# ----------------------------------------
# Xtreme extension download
# ----------------------------------------
xtremeEDownload() {
    printWarning;
    areYouSure;
    if [[ "$userAnswer" == "Y" || "$userAnswer" == "y" ]]; then
        clear
        echo -e $Y"$divider"$N; sleep 0.05;
        echo -e "$Y"'[+] X T R E M E  E X T E N S I O N'"$N"; sleep 0.05;
        echo -e $Y"$divider"$N; sleep 0.05;
        echo -e "$Y""Adds Xtreme Blocking Pack to current hosts.""$N"; sleep 0.05;
        echo -e $Y"$divider"$N; sleep 0.05;
        wget --no-check-certificate -q -O $hostsGZ "https://block.energized.pro/extensions/xtreme/formats/hosts.gz" & pid=$!
        spinPID "Extension: Downloading";
        gzip -d -c $hostsGZ > $stemp
        mv "$hosts" $temp
        truncate -s 0 "$hosts"
        cat $temp $stemp > "$hosts"
        checkEP;
        echo -en "$W""\r[""$N""$Y""✓""$N""$W""] Extension: ""$N""$Y""Xtreme Extension\n""$N"
        rm -f $temp $stemp $hostsGZ
    else
        clear
    fi
}
# ----------------------------------------

# ----------------------------------------
# Aut update extenstion
# ----------------------------------------
autoUpdateExtension() {
    cleanupTemp;
    if [ "$1" == "porn" ]; then
        hostsURL=https://block.energized.pro/porn/formats/hosts.gz
    else
        hostsURL=https://block.energized.pro/extensions/$1/formats/hosts.gz
    fi
    wget --no-check-certificate -q -U "$userAgent" -O $hostsGZ "$hostsURL"
    gzip -d -c $hostsGZ > $stemp
    mv "$hosts" $temp
    truncate -s 0 "$hosts"
    cat $temp $stemp > "$hosts"
    rm -f $temp $stemp $hostsGZ
}
# ----------------------------------------

# ----------------------------------------
# Auto update hosts, whitelist, blacklist and extension(s)
# ----------------------------------------
updateHWBE() {
    checkEP;
    currentIP=$(grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\} watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
    if [ -z "$currentIP" ]; then
        currentIP=$(grep ' watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
    fi
    if [ "$autoPack" == "null" ]; then
        echo -e "$R""$divider""$N"; sleep 0.05;
        echo -e "$R""[-] No pack applied yet!""$N"; sleep 0.05;
        echo -e "$R""$divider""$N"; sleep 0.05;
        sleep 3
    else
        echo -e $Y"$divider"$N; sleep 0.05;
        echo -e "$Y""[+] Applying $epPack""$N"; sleep 0.05;
        echo -e $Y"$divider"$N; sleep 0.05;
        wget --no-check-certificate -q -U "$userAgent" -O $hostsGZ "https://block.energized.pro/$autoPack/formats/hosts.gz" & pid=$!
        spinPID "Pack: Downloading";
        gzip -d -c $hostsGZ > "$hosts"
        rm -f $hostsGZ
        checkEPPack;
        echo -en "$W""\r[""$N""$Y""✓""$N""$W""] Pack: ""$N""$Y""$epPack\n""$N"
        # Update cache filter
        setFilter;
        # Updating extension
        if [ ! -z "$ePCheck" ]; then
            autoUpdateExtension "porn" & pid=$!
            spinPID "Porn Extension: Downloading"
            echo -en "$W""\r[""$N""$Y""✓""$N""$W""] Porn Extension: ""$N""$Y""Applied successfully.\n""$N"; sleep 0.1;
        else
            echo -e "$Y"'[~] No porn extension'"$N"; sleep 0.1;
        fi
        if [ ! -z "$ePLCheck" ]; then
            autoUpdateExtension "porn-lite" & pid=$!
            spinPID "Porn-Lite Extension: Downloading"
            echo -en "$W""\r[""$N""$Y""✓""$N""$W""] Porn-lite Extension: ""$N""$Y""Applied successfully.\n""$N"; sleep 0.1;
        else
            echo -e "$Y"'[~] No porn-lite extension'"$N"; sleep 0.1;
        fi
        if [ ! -z "$eRCheck" ]; then
            autoUpdateExtension "regional" & pid=$!
            spinPID "Regional Extension: Downloading"
            echo -en "$W""\r[""$N""$Y""✓""$N""$W""] Regional Extension: ""$N""$Y""Applied successfully.\n""$N"; sleep 0.1;
        else
            echo -e "$Y"'[~] No regional extension'"$N"; sleep 0.1;
        fi
        if [ ! -z "$eSCheck" ]; then
            autoUpdateExtension "social" & pid=$!
            spinPID "Social Extension: Downloading"
            echo -en "$W""\r[""$N""$Y""✓""$N""$W""] Social Extension: ""$N""$Y""Applied successfully.\n""$N"; sleep 0.1;
        else
            echo -e "$Y"'[~] No social extension'"$N"; sleep 0.1;
        fi
        if [ ! -z "$eXCheck" ]; then
            autoUpdateExtension "xtreme" & pid=$!
            spinPID "Xtreme Extension: Downloading"
            echo -en "$W""\r[""$N""$Y""✓""$N""$W""] Xtreme Extension: ""$N""$Y""Applied successfully.\n""$N"; sleep 0.1;
        else
            echo -e "$Y"'[~] No xtreme extension'"$N"; sleep 0.1;
        fi
        # Change redirection IP
        if [ "$currentIP" != "0.0.0.0" ]; then
            changeRedirectionIP "$currentIP" & pid=$!
            spinPID "Redirection IP: Changing to $currentIP"
            echo -en "$W""\r[""$N""$Y""✓""$N""$W""] Redirection IP: ""$N""$Y""Updated to $currentIP\n""$N"; sleep 0.1;
        fi
        # Blacklisting
        doBlacklist;
        # Whitelisting
        doWhitelist;
        printDonate;
    fi
}
# ----------------------------------------

# ----------------------------------------
# Open config file
# ----------------------------------------
openConfig() {
    case "$2" in
        show) clear
            echo -e $Y"$divider"$N; sleep 0.05;
            echo -e "$Y"'ϟ O P E N  C O N F I G  F I L E'"$N"; sleep 0.05;
            echo -e $Y"$divider"$N; sleep 0.05;
            echo "Open the config file."; sleep 0.05;
            echo -e "$Y""$divider""$N"
            echo ''; sleep 0.05;
            head -n 30 $config
            echo ''; sleep 0.05;
            echo -n -e "$W"'[+] Open config file?'"$N" "$Y"'[y/n]:'"$N"
            read answer
            if [[ "$answer" == "Y" || "$answer" == "y" ]]; then
                am start -a android.intent.action.VIEW -d file://$config -t text/plain > /dev/null 2>&1;
            fi
            clear
            ;;
        edit) clear
            am start -a android.intent.action.VIEW -d file://$config -t text/plain > /dev/null 2>&1;
            ;;
    esac
}
# ----------------------------------------

# ----------------------------------------
# Warning
# ----------------------------------------
printWarning() {
    echo -e "$R""$divider""$N"; sleep 0.05;
    echo -e "$R""W A R N I N G""$N"; sleep 0.05;
    echo -e "$R""$divider""$N"; sleep 0.05;
    echo -e "$R""This may break your internet usage experience.""$N"; sleep 0.05;
    echo -e "$R""Because of its size or blocking pattern.""$N"; sleep 0.05;
    echo -e "$R""For more info, https://block.energized.pro""$N"; sleep 0.05;
    echo -e "$R""\nYou may proceed if you know what you are doing!""$N"; sleep 0.05;
    echo -e "$R""$divider""$N"; sleep 0.05;
}
# ----------------------------------------

# ----------------------------------------
# Return
# ----------------------------------------
printReturn() {
    echo -en "$W""[←] Returning ""$N"
    echo -en "$Y""•""$N"; sleep 0.2;
    echo -en "$Y""•""$N"; sleep 0.3;
    echo -en "$Y""•""$N"; sleep 1;
}
# ----------------------------------------

# ----------------------------------------
# Donate
# ----------------------------------------
printDonate() {
    sleep 0.1
    echo -e "$Y""$divider""$N"; sleep 0.1
    echo -e "$Y"'[+] If you loved our work, consider donating.'"$N"; sleep 0.1
    echo -e "$B"'  > PayPal: paypal.me/shadmansaleh'"$N"
    echo -e "$Y"'  > Support: energized.pro/support'"$N"
    echo -e "$Y""$divider""$N"; sleep 0.1
    sleep 0.1
}
# ----------------------------------------

# ----------------------------------------
# Backup Hosts
# ----------------------------------------
backupHosts() {
    echo -e $Y"$divider"$N; sleep 0.05;
    echo -e "$Y"'ϟ B A C K U P'"$N"; sleep 0.05;
    echo -e $Y"$divider"$N; sleep 0.05;
    echo -e "$Y""Make a backup of current hosts.""$N"; sleep 0.05;
    echo -e $Y"$divider"$N; sleep 0.05;
    if [ -f "$hosts" ]; then
        gzip -9 -c "$hosts" > $hostsBackup & pid=$!
        spinPID "Storing Hosts"
        cp $filter $filterBackup
        echo -en $W"\r["$N$Y"✓"$N$W"] Storing Hosts: "$N$Y"Completed."$N; sleep 0.1;
        echo -e -n $W"\n[+] Backup Config file?"$N $Y"[Y/N]"$N "$answer"
        read answer
        if [[ "$answer" == "Y" || "$answer" == "y" ]]; then
            spinPID "Storing Config"
            cp $config $configBackup
            echo -en $W"\r["$N$Y"✓"$N$W"] Storing Config: "$N$Y"Completed.\n\n"$N; sleep 0.1;
        else
            echo -e $W"[×] Not backing up config.\n"$N; sleep 0.1;
        fi
        printDonate;
    else
        echo -e "$R""$divider""$N"; sleep 0.05;
        echo -e "$R""[×] No hosts found.""$N"; sleep 0.05;
        echo -e "$R""$divider\n\n""$N"; sleep 0.05;
    fi
}
# ----------------------------------------

# ----------------------------------------
# Clear Hosts
# ----------------------------------------
clearHosts() {
    checkBusybox;
    echo -e $Y"$divider"$N; sleep 0.05;
    echo -e "$Y"'ϟ C L E A N  H O S T S'"$N"; sleep 0.05;
    echo -e $Y"$divider"$N; sleep 0.05;
    echo -e "$Y""Revert back to stock hosts.""$N"; sleep 0.05;
    echo -e $Y"$divider"$N; sleep 0.05;
    echo ""; sleep 0.05;
    echo -n -e "$W""[+] Cleaning ""$N"; sleep 0.05;
    echo -n -e "$G""•""$N"; sleep 0.05;
    truncate -s 0 "$hosts"
    echo -n -e "$Y""•""$N"; sleep 0.05;
    rm -f $filter
    echo -n -e "$C""•""$N"; sleep 0.05;
    touch $filter
    echo -n -e "$B""•""$N"; sleep 0.05;
    echo -e "# Energized Protection - https://energized.pro\n# Let's make an annoyance free better open internet, altogether!\n\n127.0.0.1 localhost\n::1" >> "$hosts"
    echo -n -e "$R""•\n""$N"; sleep 0.05;
    echo -e "$W""[+] Done.\n""$N"; sleep 0.05;
    checkEP;
    checkUpdate;
    printCountedDomains;
    printDonate;
}
# ----------------------------------------

# ----------------------------------------
# Restore Hosts
# ----------------------------------------
restoreHosts() {
    checkBusybox;
    echo -e $Y"$divider"$N; sleep 0.05;
    echo -e "$Y"'ϟ R E S T O R E'"$N"; sleep 0.05;
    echo -e $Y"$divider"$N; sleep 0.05;
    echo -e "$Y""Restore the hosts backup.""$N"; sleep 0.05;
    echo -e $Y"$divider"$N; sleep 0.05;
    if [ -s $hostsBackup ]; then
        gzip -d -c $hostsBackup > "$hosts" & pid=$!
        spinPID "Restoring Hosts"
        cp $filterBackup $filter
        echo -en $W"\r["$N$Y"✓"$N$W"] Restoring Hosts: "$N$Y"Completed.\n"$N; sleep 0.1;
        if [ -s $configBackup ]; then
           echo -e -n $W"[+] Restore Config file?"$N $Y"[Y/N]"$N "$answer"
           read answer
           if [[ "$answer" == "Y" || "$answer" == "y" ]]; then
              spinPID "Restoring Config"
              cp $configBackup $config
              echo -en $W"\r["$N$Y"✓"$N$W"] Restoring Config: "$N$Y"Completed.\n\n"$N; sleep 0.1;
              echo ''
           else
              echo -e $W"[×] Not restoring config.\n"$N; sleep 0.1;
           fi
        fi
        printDonate;
    else
        echo -e $R"$divider"$N; sleep 0.05;
        echo -e "$R""[×] No backup found.""$N"; sleep 0.05;
        echo -e "$R""$divider\n\n""$N"; sleep 0.05;
    fi
}
# ----------------------------------------

# ----------------------------------------
# Open Hosts File
# ----------------------------------------
openHosts() {
    clear
    checkBusybox
    echo -e $Y"$divider"$N; sleep 0.05;
    echo -e "$Y"'ϟ O P E N  H O S T S  F I L E'"$N"; sleep 0.05;
    echo -e $Y"$divider"$N; sleep 0.05;
    echo "Open the hosts file."; sleep 0.05;
    echo -e "$Y""$divider""$N"
    echo ''; sleep 0.05;
    head -n 30 "$hosts"
    echo ''; sleep 0.05;
    echo -n -e "$W"'[+] Open Hosts File?'"$N" "$Y"'[Y/N]:'"$N"
    read answer
    if [[ "$answer" == "Y" || "$answer" == "y" ]]; then
        am start -a android.intent.action.VIEW -d file://"$hosts" -t text/plain > /dev/null 2>&1;
    fi
    clear
}
# ----------------------------------------

# ----------------------------------------
# Aut update hosts
# ----------------------------------------
autoUpdateHosts() {
	cleanupTemp;
	hostsURL="https://block.energized.pro/$DIR"
	wget --no-check-certificate -q -U "$userAgent" -O $hostsGZ "$hostsURL"
	gzip -d -c $hostsGZ > $hosts
}
# ----------------------------------------

# ----------------------------------------
# Download pack
# ----------------------------------------
downloadPack() {
	echo ''
	case "$2" in
	    spark|Spark|SPARK|blugo|Blugo|bluGo|BLUGO|blu|Blu|BLU|basic|Basic|BASIC|porn|Porn|PORN|ultimate|Ultimate|ULTIMATE|unified|Unified|UNIFIED|porn-lite|pornlite|Porn-lite|PORN-LITE|xtreme|Xtreme|XTREME|regional|Regional|REGIONAL|social|Social|SOCIAL)
	    if [[ "$2" == "spark" || "$2" == "Spark" || "$2" == "SPARK" ]]; then
	      pack="spark"
	      epPack="Spark Protection"
	      DIR="/spark/formats/hosts.gz"
	      autoUpdateHosts "$DIR" & pid=$!
	      spinPID "Pack: Downloading";
	      echo -en $W"\r["$N$Y"✓"$N$W"] Pack: "$N$Y"$epPack\n"$N
	   elif [[ "$2" == "blu" || "$2" == "Blu" || "$2" == "BLU" ]]; then
	      pack="blu"
	      epPack="Blu Protection"
	      DIR="/blu/formats/hosts.gz"
	      autoUpdateHosts "$DIR" & pid=$!
	      spinPID "Pack: Downloading";
	      echo -en $W"\r["$N$Y"✓"$N$W"] Pack: "$N$Y"$epPack\n"$N
	   elif [[ "$2" == "blugo" || "$2" == "bluGo" || "$2" == "Blugo" || "$2" == "BluGo" || "$2" == "BLUGO" ]]; then
	      pack="bluGo"
	      epPack="BluGo Protection"
	      DIR="/bluGo/formats/hosts.gz"
	      autoUpdateHosts "$DIR" & pid=$!
	      spinPID "Pack: Downloading";
	      echo -en $W"\r["$N$Y"✓"$N$W"] Pack: "$N$Y"$epPack\n"$N
	   elif [[ "$2" == "basic" || "$2" == "Basic" || "$2" == "BASIC" ]]; then
	      pack="basic"
	      epPack="Basic Protection"
	      DIR="/basic/formats/hosts.gz"
	      autoUpdateHosts "$DIR" & pid=$!
	      spinPID "Pack: Downloading";
	      echo -en $W"\r["$N$Y"✓"$N$W"] Pack: "$N$Y"$epPack\n"$N
	   elif [[ "$2" == "porn" || "$2" == "Porn" || "$2" == "PORN" ]]; then
	      pack="porn"
	      epPack="Porn Protection"
	      DIR="/porn/formats/hosts.gz"
	      autoUpdateHosts "$DIR" & pid=$!
	      spinPID "Pack: Downloading";
	      echo -en $W"\r["$N$Y"✓"$N$W"] Pack: "$N$Y"$epPack\n"$N
	   elif [[ "$2" == "ultimate" || "$2" == "Ultimate" || "$2" == "ULTIMATE" ]]; then
	      pack="ultimate"
	      epPack="Ultimate Protection"
	      DIR="/ultimate/formats/hosts.gz"
	      autoUpdateHosts "$DIR" & pid=$!
	      spinPID "Pack: Downloading";
	      echo -en $W"\r["$N$Y"✓"$N$W"] Pack: "$N$Y"$epPack\n"$N
	   elif [[ "$2" == "unified" || "$2" == "Unified" || "$2" == "UNIFIED" ]]; then
	      pack="unified"
	      epPack="Unified Protection"
	      DIR="/unified/formats/hosts.gz"
	      autoUpdateHosts "$DIR" & pid=$!
	      spinPID "Pack: Downloading";
	      echo -en $W"\r["$N$Y"✓"$N$W"] Pack: "$N$Y"$epPack\n"$N
	   elif [[ "$2" == "xtreme" || "$2" == "Xtreme" || "$2" == "XTREME" ]]; then
	      pack="extensions/xtreme"
	      echo -e $R"[-] $2 - only extension can't be applied.\n"$N
	      exit
	   elif [[ "$2" == "porn-lite" || "$2" == "pornlite" || "$2" == "Porn-lite" || "$2" == "Pornlite" || "$2" == "PORN-LITE" || "$2" == "PORNLITE" ]]; then
	      pack="extensions/porn-lite"
	      echo -e $R"[-] $2 - only extension can't be applied.\n"$N
	      exit
	   elif [[ "$2" == "regional" || "$2" == "Regional" || "$2" == "REGIONAL" ]]; then
	      pack="extensions/regional"
	      echo -e $R"[-] $2 - only extension can't be applied.\n"$N
	      exit
	   elif [[ "$2" == "social" || "$2" == "Social" || "$2" == "SOCIAL" ]]; then
	      pack="extensions/social"
	      echo -e $R"[-] $2 - only extension can't be applied.\n"$N
	      exit
	   fi
	   currentIP=$(grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\} watchdog.energized.pro' $hosts | sed 's/ watchdog.energized.pro//')
	   if [ -z "$currentIP" ]; then
	      currentIP=$(grep ' watchdog.energized.pro' $hosts | sed 's/ watchdog.energized.pro//')
	   fi 
	   
	   rm -f $hostsGZ
	   
	   case "$3" in
	     -e|--extension) shift
	         for i in $@
	         do
	         # Applying extension
	         if [[ "$i" == "porn" || "$i" == "Porn" || "$i" == "PORN" ]]; then
	            autoUpdateExtension "porn" & pid=$!
	            spinPID "Porn Extension: Downloading"
	            echo -en $W"\r["$N$Y"✓"$N$W"] Porn Extension: "$N$Y"Applied successfully.\n"$N; sleep 0.1;
		     fi
		     if [[ "$i" == "porn-lite" || "$i" == "pornlite" || "$i" == "Porn-lite" || "$i" == "Pornlite" || "$i" == "PORN-LITE" || "$i" == "PORNLITE" ]]; then
		        autoUpdateExtension "porn-lite" & pid=$!
		        spinPID "Porn-Lite Extension: Downloading"
		        echo -en $W"\r["$N$Y"✓"$N$W"] Porn-lite Extension: "$N$Y"Applied successfully.\n"$N; sleep 0.1;
		     fi
		     if [[ "$i" == "regional" || "$i" == "Regional" || "$i" == "REGIONAL" ]]; then
		        autoUpdateExtension "regional" & pid=$!
		        spinPID "Regional Extension: Downloading"
		        echo -en $W"\r["$N$Y"✓"$N$W"] Regional Extension: "$N$Y"Applied successfully.\n"$N; sleep 0.1;
		     fi
		     if [[ "$i" == "social" || "$i" == "Social" || "$i" == "SOCIAL" ]]; then
		        autoUpdateExtension "social" & pid=$!
		        spinPID "Social Extension: Downloading"
		        echo -en $W"\r["$N$Y"✓"$N$W"] Social Extension: "$N$Y"Applied successfully.\n"$N; sleep 0.1;
		     fi
		     if [[ "$i" == "xtreme" || "$i" == "Xtreme" || "$i" == "XTREME" ]]; then
		        autoUpdateExtension "xtreme" & pid=$!
		        spinPID "Xtreme Extension: Downloading"
		        echo -en $W"\r["$N$Y"✓"$N$W"] Xtreme Extension: "$N$Y"Applied successfully.\n"$N; sleep 0.1;
		     fi
		     
		     done
		     
		     # Change redirection IP
		     if [ "$currentIP" != "0.0.0.0" ]; then
		        changeRedirectionIP "$currentIP" & pid=$!
		        spinPID "Redirection IP: Changing to $currentIP"
		        echo -en $W"\r["$N$Y"✓"$N$W"] Redirection IP: "$N$Y"Updated to $currentIP\n"$N; sleep 0.1;
		     fi
		     ;;
		     
	     *) echo -e $W"[*] No extension applied."$N
	         ;;    
	   esac
	   size=`ls -lah $hosts | awk '{print $5}'`
	   echo -e $W"[+] Size: "$N$Y"$size"$N
	   setFilter & pid=$!
	   cleanupTemp;
	   spinPID "Filter: Updating";
	   echo -en $W"\r["$N$Y"✓"$N$W"] Filter: "$N$Y"Updated \n\n"$N
	   printDonate;
	   ;; 
    *) echo -e $R"[-] $2 invalid input.\n"$N
       ;;
    esac   
}
# ----------------------------------------

# ----------------------------------------
# Add extension to hosts
# ----------------------------------------
addExtension() {
    currentIP=$(grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\} watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
    if [ -z "$currentIP" ]; then
        currentIP=$(grep ' watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
    fi
    echo ''
    case "$2" in
        porn|Porn|PORN|ultimate|Ultimate|ULTIMATE|unified|Unified|UNIFIED|porn-lite|pornlite|Porn-lite|PORN-LITE|xtreme|Xtreme|XTREME|regional|Regional|REGIONAL|social|Social|SOCIAL) shift
            for i in "$@"
            do
                # Applying extension
                if [[ "$i" == "porn" || "$i" == "Porn" || "$i" == "PORN" ]]; then
                    autoUpdateExtension "porn" & pid=$!
                    spinPID "Porn Extension: Downloading"
                    echo -en "$W""\r[""$N""$Y""✓""$N""$W""] Porn Extension: ""$N""$Y""Applied successfully.\n""$N"; sleep 0.1;
                fi
                if [[ "$i" == "porn-lite" || "$i" == "pornlite" || "$i" == "Porn-lite" || "$i" == "Pornlite" || "$i" == "PORN-LITE" || "$i" == "PORNLITE" ]]; then
                    autoUpdateExtension "porn-lite" & pid=$!
                    spinPID "Porn-Lite Extension: Downloading"
                    echo -en "$W""\r[""$N""$Y""✓""$N""$W""] Porn-lite Extension: ""$N""$Y""Applied successfully.\n""$N"; sleep 0.1;
                fi
                if [[ "$i" == "regional" || "$i" == "Regional" || "$i" == "REGIONAL" ]]; then
                    autoUpdateExtension "regional" & pid=$!
                    spinPID "Regional Extension: Downloading"
                    echo -en "$W""\r[""$N""$Y""✓""$N""$W""] Regional Extension: ""$N""$Y""Applied successfully.\n""$N"; sleep 0.1;
                fi
                if [[ "$i" == "social" || "$i" == "Social" || "$i" == "SOCIAL" ]]; then
                    autoUpdateExtension "social" & pid=$!
                    spinPID "Social Extension: Downloading"
                    echo -en "$W""\r[""$N""$Y""✓""$N""$W""] Social Extension: ""$N""$Y""Applied successfully.\n""$N"; sleep 0.1;
                fi
                if [[ "$i" == "xtreme" || "$i" == "Xtreme" || "$i" == "XTREME" ]]; then
                    autoUpdateExtension "xtreme" & pid=$!
                    spinPID "Xtreme Extension: Downloading"
                    echo -en "$W""\r[""$N""$Y""✓""$N""$W""] Xtreme Extension: ""$N""$Y""Applied successfully.\n""$N"; sleep 0.1;
                fi

            done

            # Change redirection IP
            if [ "$currentIP" != "0.0.0.0" ]; then
                changeRedirectionIP "$currentIP" & pid=$!
                spinPID "Redirection IP: Changing to $currentIP"
                echo -en "$W""\r[""$N""$Y""✓""$N""$W""] Redirection IP: ""$N""$Y""Updated to $currentIP\n""$N"; sleep 0.1;
            fi
            echo ''
            printDonate;
            ;;

        *) echo -e "$R""[-] $2 invalid input.\n""$N"
            ;;
    esac
}
# ----------------------------------------

# ----------------------------------------
# Blacklist
# ----------------------------------------
doBlacklist() {
    currentIP=$(grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\} watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
    if [ -z "$currentIP" ]; then
        currentIP=$(grep ' watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
    fi
    echo -e $Y"$divider"$N; sleep 0.05;
    echo -e "$Y"'ϟ B L A C K L I S T I N G'"$N"; sleep 0.05;
    echo -e $Y"$divider"$N; sleep 0.05;
    # Begins
    if [ ! -f $blacklist ]; then
        echo -e "$R""\n[-] No Blacklist detected!""$N"
        echo -e "$W""[+] Copy your blacklist to""$N" "$Y""$directory""$N"
    else
        if [ -f "$hosts" ]; then
            if [ -s $blacklist ]; then
                echo -e "$G"'[✓] Blacklist Found!'"$N"; sleep 0.05;
                echo -e "$W"'[+] Applying Blacklist:\n'"$N"; sleep 0.05;
                echo -e "$C"'[+] Blacklist Log -'"$N"; sleep 0.05;
                rm -f $temp $stemp $ptemp $ltemp
                sed 's/^ *//; s/ *$//; /^$/d; /^#/ d' $blacklist > $ltemp
                sort -u $ltemp > $temp
                NEWFILTERS="$(cat $temp)"
                echo -e "\n# Applied on - $date" >> "$hosts"
                printf '%s\n' "$NEWFILTERS" | while IFS= read -r linenew
                do
                    domain=$(getDomain "$linenew");
                    # 1
                    if [[ "$domain" == "null" ]]; then
                        echo "$R""[×] Error: Wrong input.""$N"; sleep 2;
                    else
                        if [ ! "$(grep -x "$currentIP $domain" "$hosts")" ]; then
                            echo -e "$currentIP $domain" >> "$hosts"
                            echo -e "$W""  >""$N""$Y"" $domain ""$N""$W""- blacklisted.""$N"
                        else
                            echo -e "$W""  > ""$N""$R""$domain ""$N""$W""- already blacklisted.""$N"
                        fi
                    fi
                done
                rm -f $temp $stemp $ptemp $ltemp
                echo -e "$G"'\n[✓] Done\n'"$N"; sleep 0.05;
            else
                echo -e "$R"'[-] Blacklist file is empty!'"$N"; sleep 0.05;
                echo -e "$R"'[-] Nothing blacklisted!'"$N"; sleep 0.05;
            fi
        else
            echo -e "$R"'\n[-] No hosts file detected!'"$N"; sleep 0.05;
            echo -e "$Y"'[+] Apply a hosts file first\n'"$N"; sleep 0.05;
            sleep 2
        fi
    fi
}
# ----------------------------------------

# ----------------------------------------
# Whitelist
# ----------------------------------------
doWhitelist() {
    currentIP=$(grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\} watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
    if [ -z "$currentIP" ]; then
        currentIP=$(grep ' watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
    fi
    echo -e $Y"$divider"$N; sleep 0.05;
    echo -e "$Y"'ϟ W H I T E L I S T I N G'"$N"; sleep 0.05;
    echo -e $Y"$divider"$N; sleep 0.05;
    # Begins
    if [ ! -f $whitelist ]; then
        echo -e "$R""[-] No Whitelist Detected!""$N"; sleep 0.05;
        echo -e "$W"'[+] Copy your whilelist to'"$N" "$Y"'$directory'"$N"; sleep 0.05;
    else
        if [ -f "$hosts" ]; then
            if [ -s $whitelist ]; then
                echo -e "$G""[✓] Whitelist Found!""$N"; sleep 0.05;
                echo -e "$W""[+] Applying Whitelist:\n""$N"; sleep 0.05;
                echo -e "$C"'[+] Whitelist Log -'"$N"; sleep 0.05;
                rm -f $temp $stemp $ptemp $ltemp
                sed 's/^ *//; s/ *$//; /^$/d; /^#/ d' $whitelist > $ltemp
                sort -u $ltemp > $stemp
                NEWFILTERS="$(cat $stemp)"
                printf '%s\n' "$NEWFILTERS" | while IFS= read -r linenew
                do
                    domain=$(getDomain "$linenew");
                    # 1
                    if [[ "$domain" == "null" ]]; then
                        echo "$R""[×] Error: Wrong input.""$N"; sleep 2;
                    else
                        if [ ! "$(grep -x "$currentIP $domain" "$hosts")" ]; then
                            echo -e "$W""  >""$N""$G"" $domain ""$N""$W""- already whitelisted.""$N"
                        else
                            grep -Fvxf $stemp "$hosts" > $temp
                            rm -f "$hosts"
                            mv -f $temp "$hosts"
                            grep -Fvf $stemp "$hosts" > $temp
                            rm -f "$hosts"
                            mv -f $temp "$hosts"
                            grep -vxf $stemp "$hosts" > $temp
                            rm -f "$hosts"
                            mv -f $temp "$hosts"
                            echo -e "$W""  >""$N""$Y"" $domain ""$N""$W""- whitelisted.""$N"
                        fi
                    fi
                done
                rm -f $temp $stemp $ptemp $ltemp
                echo -e "$G"'\n[✓] Done\n'"$N"; sleep 0.05;
            else
                echo -e "$R"'[-] Whitelist file is empty!'"$N"; sleep 0.05;
                echo -e "$R"'[-] Nothing whitelisted!'"$N"; sleep 0.05;
            fi
        else
            echo -e "$R"'\n[-] No hosts file detected!'"$N"; sleep 0.05;
            echo -e "$Y"'[+] Apply a hosts file first\n'"$N"; sleep 0.05;
        fi
    fi
}
# ----------------------------------------

# ----------------------------------------
# Instant blacklist
# ----------------------------------------
instantBlacklist() {
    while true
    do
        currentIP=$(grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\} watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
        if [ -z "$currentIP" ]; then
            currentIP=$(grep ' watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
        fi
        clear
        echo -e $Y"$divider"$N; sleep 0.05;
        echo -e "$Y"'ϟ I N S T A N T  B L A C K L I S T'"$N"; sleep 0.05;
        echo -e $Y"$divider"$N; sleep 0.05;
        echo -e "$W""Adds a domain to hosts as blacklisted.\n > Domain name only. (ex. xyz.com)\n > Subdomain also works. (ex. a.xyz.com)""$N"; sleep 0.05;
        echo -e $Y"$divider"$N; sleep 0.05;
        echo ""; sleep 0.05;
        echo -en "$W"'[>] Domain: '"$N"
        read ib
        ##
        domain=$(getDomain "$ib");
        if [[ "$domain" == "0" ]]; then
            echo "$R""[×] Error: $ib not a domain.""$N"; sleep 2;
        else
            if [ ! "$(grep -x "$currentIP $domain" "$hosts")" ]; then
                echo -en "$W"'\n > blacklist '"$N""$Y""$domain ""$N""$W""?\n""$N"
                areYouSure;
                if [[ "$userAnswer" == "Y" || "$userAnswer" == "y" ]]; then
                    echo -e "\n# Instant Blacklist Applied on - $date" >> "$hosts"
                    echo -e "$currentIP $domain" >> "$hosts"
                    echo -e "\n# Applied on - $date" >> $blacklist
                    echo "$domain" >> $blacklist
                    echo -e "$W""\n > ""$N""$Y""$domain ""$N""$W""- blacklisted.\n""$N"; sleep 0.05;
                    echo -n -e "$W"'[>] Blacklist another domain?'"$N" "$Y"'[y/n]:'"$N"
                    read answer
                    if [[ "$answer" == "N" || "$answer" == "n" ]]; then
                        break
                    fi
                    clear
                else
                    clear
                    echo -en "$W"'[+] Blacklist another domain?'"$N" "$Y"'[y/n]:'"$N"
                    read answer
                    if [[ "$answer" == "N" || "$answer" == "n" ]]; then
                        break
                    fi
                    printReturn
                fi
            else
                echo -e "$G""\n[✓] ""$N""$Y""$domain""$N""$G"" - already blacklisted!\n""$N"
                sleep 1
                echo -en "$W"'[+] Blacklist another domain?'"$N" "$Y"'[y/n]:'"$N"
                read answer
                if [[ "$answer" == "N" || "$answer" == "n" ]]; then
                    break
                fi
            fi
            ##
        fi
    done
}
# ----------------------------------------

# ----------------------------------------
# Instant blacklist CLI
# ----------------------------------------
instantBlacklistCli() {
    echo ''
    currentIP=$(grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\} watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
    if [ -z "$currentIP" ]; then
        currentIP=$(grep ' watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
    fi
    if [ -f "$hosts" ]; then
        #
        shift
        for i in "$@"
        do
            ##
            domain=$(getDomain "$i");
            if [[ "$domain" == "0" ]]; then
                echo "$R""[×] Error: $i not a domain.""$N"
            else
                if [ ! "$(grep -x "$currentIP $domain" "$hosts")" ]; then
                    echo -e "$R""[×] ""$N""$Y""$domain""$N""$R"" - not blacklisted!""$N"; sleep 0.05;
                    echo -e "\n# Instant Blacklist Applied on - $date" >> "$hosts"
                    echo -e "$currentIP $domain" >> "$hosts"
                    echo -e "$Y""[+] ""$N""$Y""$domain""$N""$Y"" - blacklisted!""$N"; sleep 0.05;
                    echo -e "\n# Applied on - $date" >> $blacklist
                    echo "$domain" >> $blacklist
                else
                    echo -e "$G""[✓] ""$N""$Y""$domain""$N""$G"" - already blacklisted!""$N"
                fi
            fi
            ##
        done
        #
    fi
    echo ''
    printDonate;
}
# ----------------------------------------

# ----------------------------------------
# Instant whitelist
# ----------------------------------------
instantWhitelist() {
    while true
    do
        currentIP=$(grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\} watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
        if [ -z "$currentIP" ]; then
            currentIP=$(grep ' watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
        fi
        clear
        echo -e $Y"$divider"$N; sleep 0.05;
        echo -e "$Y"'ϟ I N S T A N T  W H I T E L I S T'"$N"; sleep 0.05;
        echo -e $Y"$divider"$N; sleep 0.05;
        echo -e "$W""Removes a domain from hosts as whitelisted.\n > Domain name only. (ex. xyz.com)\n > Subdomain also works. (ex. a.xyz.com)""$N"; sleep 0.05;
        echo -e $Y"$divider"$N; sleep 0.05;
        echo ""; sleep 0.05;
        echo -en "$W"'[>] Domain: '"$N"
        read iw
        ##
        domain=$(getDomain "$iw");
        if [[ "$domain" == "0" ]]; then
            echo "$R""[×] Error: $iw not a domain.""$N"; sleep 2;
        else
            if [ ! "$(grep -x "$currentIP $iw" "$hosts")" ]; then
                echo -e "$W""\n[✓] ""$N""$Y""$domain""$N""$W"" - not blacklisted!\n""$N"; sleep 0.05;
                sleep 1
                echo -n -e "$W"'[+] Whitelist another domain?'"$N" "$Y"'[y/n]:'"$N"
                read answer
                if [[ "$answer" == "N" || "$answer" == "n" ]]; then
                    break
                fi
            else
                echo -en "$W"'\n > whitelist '"$N""$Y""$domain ""$N""$W""?\n""$N"
                areYouSure;
                if [[ "$userAnswer" == "Y" || "$userAnswer" == "y" ]]; then
                    grep -Fvx "$currentIP $domain" "$hosts" > $temp
                    truncate -s 0 "$hosts"
                    mv -f $temp "$hosts"
                    echo "$domain" >> $whitelist
                    echo -e "$W""\n > ""$N""$Y""$domain ""$N""$W""- whitelisted.\n""$N"; sleep 0.05;
                    echo -n -e "$W"'[+] Whitelist another domain?'"$N" "$Y"'[y/n]:'"$N"
                    read answer
                    if [[ "$answer" == "N" || "$answer" == "n" ]]; then
                        break
                    fi
                else
                    clear
                    echo -n -e "$W"'[+] Whitelist another domain?'"$N" "$Y"'[y/n]:'"$N"
                    read answer
                    if [[ "$answer" == "N" || "$answer" == "n" ]]; then
                        break
                    fi
                fi
            fi
            ##
        fi
    done

}
# ----------------------------------------

# ----------------------------------------
# Instant whitelist CLI
# ----------------------------------------
instantWhitelistCli() {
    echo ''
    currentIP=$(grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\} watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
    if [ -f "$hosts" ]; then
        #
        shift
        for i in "$@"
        do
            ##
            domain=$(getDomain "$i");
            if [[ "$domain" == "0" ]]; then
                echo "$R""[×] Error: $i not a domain.""$N"
            else
                if [ ! "$(grep -x "$currentIP $domain" "$hosts")" ]; then
                    echo -e "$G""[✓] ""$N""$Y""$domain""$N""$G"" - already whitelisted!""$N"; sleep 0.05;
                else
                    echo -e "$R""[×] ""$N""$Y""$domain""$N""$R"" - not whitelisted!""$N"; sleep 0.05;
                    grep -Fvx "$currentIP $domain" "$hosts" > $temp
                    truncate -s 0 "$hosts"
                    mv -f $temp "$hosts"
                    echo -e "$Y""[+] ""$N""$Y""$domain""$N""$Y"" - whitelisted!""$N"; sleep 0.05;
                    echo -e "\n# Applied on - $date" >> $whitelist
                    echo "$domain" >> $whitelist
                fi
            fi
            ##
        done
        #
    fi
    echo ''
    printDonate;
}
# ----------------------------------------

# ----------------------------------------
# Redirectlist
# ----------------------------------------
doRedirect(){
    echo -e $Y"$divider"$N; sleep 0.05;
    echo -e "$Y"'ϟ R E D I R E C T'"$N"; sleep 0.05;
    echo -e $Y"$divider"$N; sleep 0.05;
    echo -e "$W""Redirects the domains in the list to an IP.""$N"; sleep 0.05;
    echo ''; sleep 0.05;
    # Begins
    if [ ! -f $REDIRECTLIST ]; then
        echo -e "$R"'\n[-] No Redirectlist detected!'"$N"
        echo -e "$W"'[+] Copy your redirect list to'"$N" "$Y"'$directory'"$N"
    else
        if [ -f "$hosts" ]; then
            if [ -s $REDIRECTLIST ]; then
                echo -e "$G"'[+] Redirectlist Found!'"$N"
                echo -e -n "$W""[+] Select IP Type -\n\n   > 1. IPV4\n   > 2. IPV6\n\n[+] Your choice -""$N" "$ipType"
                read ipType
                if [[ "$ipType" == "1" ]]; then
                    while true
                    do
                        echo -n -e "$W"'[+] Enter Redirection IPV4:'"$N" "$ipInput"
                        read ipInput
                        ip=$(grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' <<< "$ipInput")
                        if [ -z "$ip" ]; then
                            echo -e "$R""\n[×] Error: $ipInput not an IPV4.\n > Must be an IP. (Ex. 0.0.0.0)\n > No non-numeric character.\n""$N"
                            checkAgain;
                            if [[ "$userAnswer" == "N" || "$userAnswer" == "n" ]]; then
                                break
                            fi
                        else
                            break
                        fi
                    done
                else
                    echo -n -e "$W"'[+] Enter Redirection IPV6:'"$N" "$ip"
                    read ip
                fi
                echo -e "$W"'[+] Your IP:'"$N" "$Y""$ip""$N"
                echo -n -e "$W"'[+] Are you sure?'"$N" "$Y"'[Y/N]:'"$N"
                read answer
                if [[ "$answer" == "Y" || "$answer" == "y" ]]; then
                    currentIP=$(grep -o -m 1 '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\} watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
                    if [ -z "$currentIP" ]; then
                        currentIP=$(grep ' watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
                    fi
                    echo -e "$W"'[+] Redirecting...'"$N"; sleep 0.05;
                    echo -e "$C""[>] Redirect Log -""$N"
                    rm -f $stemp
                    echo nais1
                    cp $REDIRECTLIST $stemp
                    echo -e "\n# Applied on - $date" >> "$hosts"
                    sed 's/^ *//; s/ *$//; /^$/d; /^#/d' $stemp > $temp
                    echo nais2
                    #truncate -s 0 $hosts
                    NEWFILTERS="$(cat $temp)"
                    printf '%s\n' "$NEWFILTERS" | while IFS= read -r linenew
                    do
                        echo nais3
                        truncate -s 0 $stemp
                        grep -Fvx "$currentIP $linenew" "$hosts" > $stemp
                        echo nais4
                        truncate -s 0 "$hosts"
                        echo nais5
                        mv -f $stemp "$hosts"
                        #cat $temp >> $hosts
                        echo nais6
                        if [ ! "$(grep -Fx "$currentIP $linenew" "$hosts")" ]; then
                            echo -e "$ip $linenew" >> "$hosts"
                            echo nais7
                            echo -e "$Y""$linenew ""$N""$W""- redirected to ""$N""$G""$ip""$N"
                        fi
                    done
                else
                    echo -e "$W"'[+] Returning...'"$N"
                fi
            else
                echo -e "$R"'\n[-] Redirectlist file is empty!'"$N"
                echo -e "$R"'[-] Nothing redirected!'"$N"
            fi
        else
            echo -e "$R"'\[-] No hosts file detected!'"$N"
            echo -e "$Y"'[+] Apply a hosts file first'"$N"
        fi
    fi
}
# ----------------------------------------

# ----------------------------------------
# Instant reditect domain
# ----------------------------------------
instantRedirect() {
    while true
    do
        currentIP=$(grep -o -m 1 '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\} watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
        if [ -z "$currentIP" ]; then
            currentIP=$(grep ' watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
        fi
        echo -e $Y"$divider"$N; sleep 0.05;
        echo -e "$Y"'ϟ I N S T A N T  R E D I R E C T'"$N"; sleep 0.05;
        echo -e $Y"$divider"$N; sleep 0.05;
        echo -e "$W""Instant redirect helps to redirect any specific\n domain to any IP.""$N"
        echo -e $Y"$divider"$N; sleep 0.05;
        echo ""
        echo -n -e "$W"'[>] Enter Domain: '"$N"
        read irD
        domain=$(getDomain "$irD");
        if [[ "$domain" == "0" ]]; then
            echo "$R""[×] Error: $irD not a domain.""$N"; sleep 1;
            checkAgain;
            if [[ "$userAnswer" == "N" || "$userAnswer" == "n" ]]; then
                break
            fi
        else
            echo -e "$W"'[+] Domain:'"$N" "$Y""$domain""$N"
        fi
        echo -n -e "$W"'[+] Are you sure?'"$N" "$Y"'[Y/N]:'"$N"
        read answer
        if [[ "$answer" == "Y" || "$answer" == "y" ]]; then
            currentDomainIP=$(grep " $domain" "$hosts" | sed "s/ $domain//")
            if [[ ! -z "$currentDomainIP" ]]; then
                echo -e $W"\n > "$N$Y"$domain"$N$W" - already redirected to "$N$Y"$currentDomainIP\n"$N
            fi    
            grep -Fvx "$currentDomainIP $domain" "$hosts" > $temp
            truncate -s 0 "$hosts"
            mv -f $temp "$hosts"
            echo -e -n "$W""[+] Select IP Type -\n\n   > 1. IPV4\n   > 2. IPV6\n\n[+] Your choice -""$N" "$ipType"
            read ipType
            if [[ "$ipType" == "1" ]]; then
                while true
                do
                    echo -n -e "$W"'[+] Enter Redirection IPV4:'"$N" "$ipInput"
                    read ipInput
                    ip=$(grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' <<< "$ipInput")
                    if [ -z "$ip" ]; then
                        echo -e "$R""\n[×] Error: $ipInput not an IPV4.\n > Must be an IP. (Ex. 0.0.0.0)\n > No non-numeric character.\n""$N"
                        checkAgain;
                        if [[ "$userAnswer" == "N" || "$userAnswer" == "n" ]]; then
                            break
                        fi
                    else
                        break
                    fi
                done
            else
                echo -n -e "$W"'[+] Enter Redirection IPV6:'"$N" "$ip"
                read ip
            fi
            echo -e "$W"'[+] IP: '"$N" "$Y""$ip""$N"
            echo -e "$W""\n > Redirect ""$N""$Y""$domain""$N""$W"" to IP ""$N""$Y""$ip""$N""$W""?""$N"
            echo -n -e "$W""[+] Are you sure?""$N" "$Y""[Y/N]:""$N"
            read answer
            if [[ "$answer" == "Y" || "$answer" == "y" ]]; then
                echo -e "\n$ip $domain" >> "$hosts"
                echo -e "\n# Applied on - $date" >> $REDIRECTLIST
                echo "$domain" >> $REDIRECTLIST
                echo -e "$W""\n > ""$N""$Y""$domain""$N""$W"" redirected to IP ""$N""$Y""$ip\n""$N"
            else
                echo -e "\n$currentIP $domain" >> "$hosts"
            fi
            sleep 1
            echo -n -e "$W"'[+] Redirect Another Domain?'"$N" "$Y"'[y/n]:'"$N"
            read answer
            if [[ "$answer" == "N" || "$answer" == "n" ]]; then
                break
            fi
            clear
        else

            echo -n -e "$W"'[+] Redirect Another Domain?'"$N" "$Y"'[y/n]:'"$N"
            read answer
            if [[ "$answer" == "N" || "$answer" == "n" ]]; then
                break
            fi
        fi
    done
}
# ----------------------------------------

# ----------------------------------------
# Instant redirect CLI
# ----------------------------------------
instantRedirectCli() {
    echo ''
    currentIP=$(grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\} watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
    if [ -z "$currentIP" ]; then
        currentIP=$(grep ' watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
    fi
    case "$2" in
        -4|-v4|--ipv4|--ip4)
            ip=$(grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' <<< "$3")
            if [ -z "$ip" ]; then
                echo -e "$R""\n[×] Error: $3 not an IPV4.\n > Must be an IP. (Ex. 0.0.0.0)\n > No non-numeric character.\n""$N"
                exit
            else
                echo -e "$W""\n[+] Your Redirection IP""$N" "$Y""$ip""$N"
            fi
            shift
            for i in "$@"
            do
                ##
                domain=$(getDomain "$i");
                if [[ "$domain" == "0" ]]; then
                    echo "$R""\n[×] Error: $i not a domain.\n""$N"
                    exit
                else
                    currentDomainIP=$(grep " $domain" "$hosts" | sed "s/ $domain//")
                     if [[ ! -z "$currentDomainIP" ]]; then
                         echo -e $W"\n > "$N$Y"$domain"$N$W" - already redirected to "$N$Y"$currentDomainIP\n"$N
                     fi
                    grep -Fvx "$currentDomainIP $domain" "$hosts" > $temp
                    truncate -s 0 "$hosts"
                    mv -f $temp "$hosts"
                    echo -e "\n$ip $domain" >> "$hosts"
                    echo -e "\n# Applied on - $date" >> $REDIRECTLIST
                    echo "$domain" >> $REDIRECTLIST
                    echo -e "$W""\n > ""$N""$Y""$domain""$N""$W"" redirected to IP ""$N""$Y""$ip""$N"
                fi
            done
            echo ''
            printDonate;
            ;;
        -6|-v6|--ipv6|--ip6)
            ip=$(grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' <<< "$3")
            if [ ! -z "$ip" ]; then
                echo -e "$R""\n[×] Error: $3 not an IPV6.\n > Must be an IPV6. (Ex. ::1)\n""$N"
                exit
            else
                echo -e "$W""\n[+] Your Redirection IP""$N" "$Y""$ip""$N"
            fi
            shift
            for i in "$@"
            do
                ##
                domain=$(getDomain "$i");
                if [[ "$domain" == "0" ]]; then
                    echo "$R""\n[×] Error: $i not a domain.\n""$N"
                    exit
                else
                    currentDomainIP=$(grep " $domain" "$hosts" | sed "s/ $domain//")
                     if [[ ! -z "$currentDomainIP" ]]; then
                         echo -e $W"\n > "$N$Y"$domain"$N$W" - already redirected to "$N$Y"$currentDomainIP\n"$N
                     fi
                    grep -Fvx "$currentDomainIP $domain" "$hosts" > $temp
                    truncate -s 0 "$hosts"
                    mv -f $temp "$hosts"
                    echo -e "\n$ip $domain" >> "$hosts"
                    echo -e "\n# Applied on - $date" >> $REDIRECTLIST
                    echo "$domain" >> $REDIRECTLIST
                    echo -e "$W""\n > ""$N""$Y""$domain""$N""$W"" redirected to IP ""$N""$Y""$ip""$N"
                fi
            done
            echo ''
            printDonate;
            ;;
        *) echo -e "$R""\n[-] $2 invalid input.\n""$N"
            ;;
    esac
}
# ----------------------------------------

# ----------------------------------------
# Redirection IP
# ----------------------------------------
redirectIP() {
    while true
    do
        currentIP=$(grep -o -m 1 '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\} watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
        echo -e $Y"$divider"$N; sleep 0.05;
        echo -e "$Y"'ϟ R E D I R E C T I O N  I P'"$N"; sleep 0.05;
        echo -e $Y"$divider"$N; sleep 0.05;
        echo -e "$W""Add custom Redirection IP. It must be an IP.\nUsing anything else than IP, may cause issue with\nyour hosts.""$N"; sleep 0.05;
        echo -e $Y"$divider"$N; sleep 0.05;
        echo ""
        if [ -z "$currentIP" ]; then
            currentIP=$(grep ' watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
            echo -e "$W""[+] Current IPV6: ""$N""$Y""$currentIP""$N"
        else
            echo -e "$W""[+] Current IPV4: $currentIP""$N"
        fi
        echo -e -n "$W""[+] Select IP Type -\n\n > 1. IPV4\n > 2. IPV6\n\n[+] Your choice -""$N" "$ipType"
        read ipType
        if [[ "$ipType" == "1" ]]; then
            while true
            do
                echo -n -e "$W"'[+] Enter Redirection IPV4:'"$N" "$ipInput"
                read ipInput
                ip=$(grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' <<< "$ipInput")
                if [ -z "$ip" ]; then
                    echo -e "$R""\n[×] Error: $ipInput not an IPV4.\n > Must be an IP. (Ex. 0.0.0.0)\n > No non-numeric character.\n""$N"
                    checkAgain;
                    if [[ "$userAnswer" == "N" || "$userAnswer" == "n" ]]; then
                        break
                    fi
                else
                    break
                fi
            done
        else
            echo -n -e "$W"'[+] Enter Redirection IPV6:'"$N" "$ip"
            read ip
        fi
        echo -e "$W""[+] Your Redirection IP""$N" "$Y""$ip""$N"
        echo -n -e "$W""[+] Are you sure?""$N" "$Y""[Y/N]:""$N"
        read answer
        if [[ "$answer" == "Y" || "$answer" == "y" ]]; then
            echo "$W""[+] Adding ""$N""$Y""$ip""$N""$W"" as redirection IP...""$N"
            rm -f $temp $stemp $ptemp
            #sed -ie 's/[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}/'"${ip}"'/g' $hosts
            sed -i "s/$currentIP/$ip/g" "$hosts"
            rm -f $temp $stemp $ptemp $ltemp
        else
            clear
        fi
        echo -n -e "$W"'[+] Change to another IP?'"$N" "$Y"'[y/n]:'"$N"
        read answer
        if [[ "$answer" == "N" || "$answer" == "n" ]]; then
            break
        fi
    done
}
# ----------------------------------------

# ----------------------------------------
# Redirection IP CLI
# ----------------------------------------
redirectIPCli() {
    currentIP=$(grep -o -m 1 '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\} watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
    if [ -z "$currentIP" ]; then
        currentIP=$(grep ' watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
    fi
    case "$2" in
        -4|-v4|--ipv4|--ip4)
            ip=$(grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' <<< "$3")
            if [ -z "$ip" ]; then
                echo -e "$R""\n[×] Error: $3 not an IPV4.\n > Must be an IP. (Ex. 0.0.0.0)\n > No non-numeric character.\n""$N"
                exit
            else
                echo -e "$W""\n[+] Your Redirection IP""$N" "$Y""$ip""$N"
                echo "$W""[+] Adding ""$N""$Y""$ip""$N""$W"" as redirection IP...""$N"
                sed -i "s/$currentIP/$ip/g" "$hosts"
            fi
            echo ''
            printDonate;
            ;;
        -6|-v6|--ipv6|--ip6)
            ip=$(grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' <<< "$3")
            if [ ! -z "$ip" ]; then
                echo -e "$R""\n[×] Error: $3 not an IPV6.\n > Must be an IPV6. (Ex. ::1)\n""$N"
                exit
            else
                echo -e "$W""\n[+] Your Redirection IP""$N" "$Y""$ip""$N"
                echo "$W""[+] Adding ""$N""$Y""$ip""$N""$W"" as redirection IP...""$N"
                sed -i "s/$currentIP/$ip/g" "$hosts"
            fi
            echo ''
            printDonate;
            ;;
        *) echo -e "$R""\n[-] $2 invalid input.\n""$N"
            ;;
    esac

}
# ----------------------------------------

# ----------------------------------------
# Check for blocked domain
# ----------------------------------------
checkBlacklistDomain () {
    while true
    do
        clear
        # Get current IP
        currentIP=$(grep -o -m 1 '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\} watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
        if [ -z "$currentIP" ]; then
            currentIP=$(grep ' watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
        fi
        echo -e $Y"$divider"$N; sleep 0.05;
        echo -e "$Y"'ϟ C H E C K  D O M A I N'"$N"; sleep 0.05;
        echo -e $Y"$divider"$N; sleep 0.05;
        echo -e "$Y""Check any specific domain availability in hosts.""$N"; sleep 0.05;
        echo -e $Y"$divider"$N; sleep 0.05;
        echo ""; sleep 0.05;
        echo -en "$W""[>] Domain: ""$N"
        read dom
        domain=$(getDomain "$dom");
        # 1
        if [[ "$domain" == "null" ]]; then
            echo "$R""[×] Error: Wrong input.""$N"; sleep 2;
        else
            #
            if [[ "$domain" == "0" ]]; then
                echo "$R""[×] Error: $dom not a domain.""$N"; sleep 2;
            else
                if [ ! "$(grep -x "$currentIP $domain" "$hosts")" ]; then
                    echo -e "$R""[×] $domain ""$N""$W""- is not in the list!""$N"; sleep 0.05;
                    echo -e "$Y""[+] Want to blacklist?""$N"; sleep 0.05;
                    areYouSure;
                    if [[ "$userAnswer" == "Y" || "$userAnswer" == "y" ]]; then
                        echo -e "$W""[+] Applying $domain as blacklist...""$N"; sleep 0.05;
                        echo -e "\n# Instant Blacklist Applied on - $date" >> "$hosts"
                        echo -e "$currentIP $domain" >> "$hosts"
                        echo -e "\n# Applied on - $date" >> $blacklist
                        echo "$domain" >> $blacklist
                        echo -e "$W""[✓] ""$N""$Y""$domain ""$N""$W""- blacklisted.""$N" && sleep 0.5
                        checkAgain;
                        if [[ "$userAnswer" == "N" || "$userAnswer" == "n" ]]; then
                            break
                            exit
                        fi
                    else
                        checkAgain;
                        if [[ "$userAnswer" == "N" || "$userAnswer" == "n" ]]; then
                            break
                        fi
                    fi
                else
                    echo -e "$G""[✓] $domain ""$N""$W""- already blacklisted!""$N"
                    sleep 1
                    echo -e "$W""[+] Want to whitelist?""$N"
                    areYouSure;
                    if [[ "$userAnswer" == "Y" || "$userAnswer" == "y" ]]; then
                        echo "$W""[+] Applying $domain as whitelist...""$N"; sleep 0.05;
                        grep -Fvx "$currentIP $domain" "$hosts" > $temp
                        truncate -s 0 "$hosts"
                        mv -f $temp "$hosts"
                        echo "$domain" >> $whitelist
                        echo -e "$W""[✓] ""$N""$Y""$domain ""$N""$W""- whitelisted.""$N"; sleep 0.05;
                        checkAgain;
                        if [[ "$userAnswer" == "N" || "$userAnswer" == "n" ]]; then
                            break
                        fi
                        clear
                    else
                        checkAgain;
                        if [[ "$userAnswer" == "N" || "$userAnswer" == "n" ]]; then
                            break
                        fi
                    fi
                fi
                #fi
            fi #2
        fi #1
    done
}
# ----------------------------------------

# ----------------------------------------
# Check for blocked domain CLI
# ----------------------------------------
checkBlacklistDomainCli () {
    while true
    do
        echo ''
        # Get current IP
        currentIP=$(grep -o -m 1 '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\} watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
        if [ -z "$currentIP" ]; then
            currentIP=$(grep ' watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
        fi
        domain=$(getDomain "$2");
        # 1
        if [[ "$domain" == "null" ]]; then
            echo "$R""[×] Error: Wrong input.""$N"; sleep 2;
        else
            #
            if [[ "$domain" == "0" ]]; then
                echo "$R""[×] Error: $2 not a domain.""$N"; sleep 2;
            else
                if [ ! "$(grep -x "$currentIP $domain" "$hosts")" ]; then
                    echo -e "$R""[×] $domain ""$N""$W""- is not in the list!""$N"; sleep 0.05;
                    echo -e "$Y""[+] Want to blacklist?""$N"; sleep 0.05;
                    areYouSure;
                    if [[ "$userAnswer" == "Y" || "$userAnswer" == "y" ]]; then
                        echo -e "$W""[+] Applying $domain as blacklist...""$N"; sleep 0.05;
                        echo -e "\n# Instant Blacklist Applied on - $date" >> "$hosts"
                        echo -e "$currentIP $domain" >> "$hosts"
                        echo -e "\n# Applied on - $date" >> $blacklist
                        echo "$domain" >> $blacklist
                        echo -e "$W""[✓] ""$N""$Y""$domain ""$N""$W""- blacklisted.""$N" && sleep 0.5
                        echo ''
                        printDonate;
                    else
                        exit
                        echo ''
                    fi
                    exit
                else
                    echo -e "$G""[✓] $domain ""$N""$W""- already blacklisted!""$N"
                    sleep 1
                    echo -e "$W""[+] Want to whitelist?""$N"
                    areYouSure;
                    if [[ "$userAnswer" == "Y" || "$userAnswer" == "y" ]]; then
                        echo "$W""[+] Applying $domain as whitelist...""$N"; sleep 0.05;
                        grep -Fvx "$currentIP $domain" "$hosts" > $temp
                        truncate -s 0 "$hosts"
                        mv -f $temp "$hosts"
                        echo "$domain" >> $whitelist
                        echo -e "$W""[✓] ""$N""$Y""$domain ""$N""$W""- whitelisted.""$N"; sleep 0.05;
                        echo ''
                        printDonate;
                    else
                        exit
                        echo ''
                    fi
                    exit
                fi
            fi #2
        fi #1
    done
    echo ''
}
# ----------------------------------------

# ----------------------------------------
# Submit issue
# ----------------------------------------
submitIssue() {
    echo -e $Y"$divider"$N; sleep 0.05;
    echo -e "$Y"'ϟ S U B M I T  I S S U E'"$N"; sleep 0.05;
    echo -e $Y"$divider"$N; sleep 0.05;
    echo "$W""Got any whitelist/blacklist issue? or anything\nelse? No worry! Just Submit via Web App or Git Issue.""$N"
    echo -e "$Y""$divider""$N"
    echo ""
    echo -e "$W""[+] Choose where to submit -\n""$N"
    echo -e "$W"" > 1. Web App - app.energized.pro\n > 2. Git Issue\n""$N"
    echo -n -e "$W""[+] Your option -""$N" "$answer"
    read answer
    if [[ "$answer" == "2" || "$answer" == "2" ]]; then
        echo -e "$B"'You will be redirected Github Issues...'"$N"
        am start -a android.intent.action.VIEW -d "https://github.com/EnergizedProtection/block/issues"
    else
        echo -e "$B"'You will be redirected Web App...'"$N"
        am start -a android.intent.action.VIEW -d "https://app.energized.pro"
    fi
}
# ----------------------------------------

# ----------------------------------------
# Restore stock settings
# ----------------------------------------
restoreStockSettings() {
    checkBusybox;
    # Mount system if needed
    mountSystem;
    # Stock Hosts
    echo -e "# Energized Protection - https://energized.pro\n# Let's make an annoyance free better open internet, altogether!\n\n127.0.0.1 localhost\n::1" > '/data/adb/modules/hosts/system/etc/hosts' > '/system/etc/hosts'; chmod '644' '/data/adb/modules/hosts/system/etc/hosts' '/system/etc/hosts'; chown 'root:root' '/data/adb/modules/hosts/system/etc/hosts' '/system/etc/hosts'
	# Unmount system
	unmountSystem;
}
# ----------------------------------------

# ----------------------------------------
# Remove files and restore stock settings
# ----------------------------------------
uninstall(){
	echo -e $Y"$divider"$N; sleep 0.05;
	echo -e "$Y"'ϟ U N I N S T A L L'"$N"; sleep 0.05;
	echo -e $Y"$divider"$N; sleep 0.05;
	echo "$W""Uninstall module and remove files.""$N"
	echo -e "$Y""$divider""$N"
	echo ""
	areYouSure;
	if [[ "$userAnswer" == "Y" || "$userAnswer" == "y" ]]; then
	   # Restore stock settings
	   restoreStockSettings;
	   # Uninstall
	   rm -rf '/system/bin/energized' '/system/bin/ENERGIZED' '/data/adb/modules/energizedprotection' '/sbin/.magisk/modules/energizedprotection' '/sdcard/Documents/EnergizedProtection' > /dev/null 2>&1;
	   clear
	   echo -e "$W""\nIt's sad to see you go!""$N"
	   echo -e "$W""But ""$N""$Y""https://energized.pro""$N""$W"" is always there for you!""$N"
	   echo -e "$W""Reboot once to remove stales.""$N"
	else
	   echo -e "$Y""\nGlad you didn't go! Thank you! :)\n""$N"
	   return
	fi
}
# ----------------------------------------

# ----------------------------------------
# Print counted domains
# ----------------------------------------
printCountedDomains() {
    if [ -f "$hosts" ]; then
    if [ "$(grep "watchdog.energized.pro" "$hosts")" ]; then
       countDomains;
       if [ "$totalDomainsNum" -gt 10000 ]; then
          totalDomains="$totalDomains  "
       elif [ "$totalDomainsNum" -gt 100000 ]; then
          totalDomains="$totalDomains"
       elif [ "$totalDomainsNum" -lt 100 ]; then
          if [ "$totalDomainsNum" == "2" ]; then
             totalDomains="-       "
          else
             totalDomains="$totalDomains       "
          fi
       fi
    else
       totalDomains="-       "
    fi
    else
       totalDomains="-       "
    fi
}
# ----------------------------------------

# ----------------------------------------
# Count domains
# ----------------------------------------
countDomains() {
	cleanupTemp;
	currentIP=$(grep -o -m 1 '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\} watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
	if [ -z "$currentIP" ]; then
	   currentIP=$(grep ' watchdog.energized.pro' "$hosts" | sed 's/ watchdog.energized.pro//')
	fi
	grep "$currentIP" "$hosts" > $atemp
	sed -i "s/$currentIP $currentIP//g" $atemp
	awk '!visited[$0]++' $atemp > $btemp
	totalDomainsNum=$(awk 'END{print NR}' $btemp)
	totalDomains=$(awk '!/^#/ && !/^$/{c++}END{print c}' $btemp | awk '{ len=length($0); res=""; for (i=0;i<=len;i++) { res=substr($0,len-i+1,1) res; if (i > 0 && i < len && i % 3 == 0) { res = "," res } }; print res }')
	cleanupTemp;
}
# ----------------------------------------

# ----------------------------------------
# Remove duplicates
# ----------------------------------------
removeDuplicates() {
	cleanupTemp;
	mv "$hosts" $temp
	awk '!visited[$0]++' $temp > $atemp
	truncate -s 0 "$hosts"
	cat $atemp > "$hosts"
	cleanupTemp;
}
# ----------------------------------------

# ----------------------------------------
# Print version
# ----------------------------------------
printVersion() {
	echo -e $W"\n> Module Version : "$N$Y"$version"$N
	hostsVersion=$(grep "# Version: " $hosts | sed 's/# Version: //')
	if [ ! -z "$hostsVersion" ]; then
	   echo -e $W"> Hosts Version  : "$N$Y"$hostsVersion\n"$N
	else
	   echo ''
	fi   
}
# ----------------------------------------

case ${1:-} in
  -b|--black) instantBlacklistCli "$@";;
  -B|--blacklist) doBlacklist;;
  -c|--clear) clearHosts;;
  -C|--config-file) openConfig "$@";;
  -e|--extension) addExtension "$@";;
  -h|--help) printHelp;;
  -i|--info) showInfo;;
  -m|--menu) showMenu;;
  -o|--open) openHosts;;
  -p|--pack) downloadPack "$@";;
  -r|--redirect) doRedirect;;
  -u|--update) updateHWBE;;
  -w|--white) instantWhitelistCli "$@";;
  -W|--whitelist) doWhitelist;;
  -bp|--backup) backupHosts;;
  -ck|--check) checkBlacklistDomainCli "$@";;
  -ip|--redirect-ip) redirectIPCli "$@";;
  -ir|--instant-redirect) instantRedirectCli "$@";;
  -re|--restore) restoreHosts;;
  -tg|--telegram) visitTelegram;;
  -un|--uninstall) uninstall;;
  -v|--version) printVersion;;
  *) printUnknown $@;;
esac
